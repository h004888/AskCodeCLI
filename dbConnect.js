// index.js
import { ChromaClient } from "chromadb";
import { createQueryEmbedding } from "./embedding.js"; // S·ª≠a import

const COLLECTION_NAME = "codebase"; // T√™n collection
const BATCH_SIZE = 10;

// ===========================
// üîπ K·∫øt n·ªëi t·ªõi ChromaDB
// ===========================
async function dbConnect() {
    // ‚öôÔ∏è C√°ch kh·ªüi t·∫°o ƒë√∫ng cho chromadb >=0.5
    const client = new ChromaClient({ path: "http://localhost:8000" });
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi ChromaDB.");
    return client;
}

// ===========================
// üîπ H√†m x√≥a v√† t·∫°o m·ªõi Collection
// ===========================
async function deleteAndCreateCollection() {
    const client = await dbConnect();
    try {
        await client.deleteCollection({ name: COLLECTION_NAME });
        console.log(`üóëÔ∏è  ƒê√£ x√≥a collection c≈© "${COLLECTION_NAME}".`);
    } catch (err) {
        // B·ªè qua l·ªói n·∫øu collection kh√¥ng t·ªìn t·∫°i
        console.log(`‚ÑπÔ∏è  Collection c≈© kh√¥ng t·ªìn t·∫°i, s·∫Ω ƒë∆∞·ª£c t·∫°o m·ªõi.`);
    }
    await client.createCollection({ name: COLLECTION_NAME });
    console.log(`‚ú® T·∫°o m·ªõi collection "${COLLECTION_NAME}"`);
}


// ===========================
// üîπ H√†m l∆∞u d·ªØ li·ªáu ƒëa lu·ªìng
// ===========================
async function saveToChromaMultiThread(embeddingData) {
    const client = await dbConnect();

    // N·∫øu l√† chu·ªói JSON ‚Üí parse, c√≤n kh√¥ng th√¨ gi·ªØ nguy√™n
    const embeddingResult =
        typeof embeddingData === "string" ? JSON.parse(embeddingData) : embeddingData;

    // M·ªü ho·∫∑c t·∫°o collection
    let collection;
    try {
        collection = await client.getCollection({ name: COLLECTION_NAME });
        console.log(`üìÅ ƒê√£ m·ªü collection "${COLLECTION_NAME}"`);
    } catch {
        collection = await client.createCollection({ name: COLLECTION_NAME });
        console.log(`‚ú® T·∫°o m·ªõi collection "${COLLECTION_NAME}"`);
    }

    // ========================================
    // üßµ Chia th√†nh c√°c batch ƒë·ªÉ x·ª≠ l√Ω song song
    // ========================================
    for (let i = 0; i < embeddingResult.length; i += BATCH_SIZE) {
        const batch = embeddingResult.slice(i, i + BATCH_SIZE);

        console.log(
            `‚öôÔ∏è  ƒêang x·ª≠ l√Ω batch ${i / BATCH_SIZE + 1}/${Math.ceil(
                embeddingResult.length / BATCH_SIZE
            )} ...`
        );

        await Promise.all(
            batch.map(async (item) => {
                try {
                    await collection.add({
                        ids: [item.id],
                        embeddings: [item.embedding],
                        metadatas: [item.metadata],
                        documents: [item.document],
                    });
                    console.log(`‚úÖ ƒê√£ th√™m: ${item.id}`);
                } catch (err) {
                    console.error(`‚ùå L·ªói khi th√™m ${item.id}:`, err.message);
                }
            })
        );
    }

    console.log("üéâ ƒê√£ l∆∞u to√†n b·ªô embedding v√†o Chroma th√†nh c√¥ng!");
}

// üîπ T√¨m ki·∫øm
async function searchCode(question, topK = 5) {
    const client = await dbConnect();
    const queryEmbedding = await createQueryEmbedding(question);
    const collection = await client.getCollection({ name: COLLECTION_NAME });
    const results = await collection.query({
        queryEmbeddings: [queryEmbedding],
        nResults: topK,
    });

    console.log(`\nüîç K·∫øt qu·∫£ t√¨m ki·∫øm cho: "${question}"\n`);

    const documents = results.documents[0];
    const metadatas = results.metadatas[0];
    const distances = results.distances[0];

    for (let i = 0; i < documents.length; i++) {
        console.log(`üìÑ File: ${metadatas[i].path}`);
        console.log(`üî¢ Score: ${distances[i].toFixed(4)}`);
        console.log("üìú Code:");
        console.log(documents[i].slice(0, 500));
        console.log("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");
    }
}

// Thay ƒë·ªïi export default th√†nh named exports
export { saveToChromaMultiThread, dbConnect, searchCode, deleteAndCreateCollection };